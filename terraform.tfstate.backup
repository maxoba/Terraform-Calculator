{
  "version": 4,
  "terraform_version": "1.9.7",
  "serial": 160,
  "lineage": "a917a657-9506-1886-ac23-6ddced405809",
  "outputs": {
    "private_ip": {
      "value": "172.31.27.191",
      "type": "string"
    },
    "public_ip": {
      "value": "44.243.130.55",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "calculator",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "ami": "ami-05d38da78ce859165",
            "arn": "arn:aws:ec2:us-west-2:105981222470:instance/i-00c08205aabe62122",
            "associate_public_ip_address": true,
            "availability_zone": "us-west-2b",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_options": [
              {
                "amd_sev_snp": "",
                "core_count": 1,
                "threads_per_core": 1
              }
            ],
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enable_primary_ipv6": null,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": "",
            "host_resource_group_arn": null,
            "iam_instance_profile": "",
            "id": "i-00c08205aabe62122",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_lifecycle": "",
            "instance_market_options": [],
            "instance_state": "running",
            "instance_type": "t2.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "maxo",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_protocol_ipv6": "disabled",
                "http_put_response_hop_limit": 2,
                "http_tokens": "required",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": 0,
            "primary_network_interface_id": "eni-0612051341048d021",
            "private_dns": "ip-172-31-27-191.us-west-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "172.31.27.191",
            "public_dns": "ec2-44-243-130-55.us-west-2.compute.amazonaws.com",
            "public_ip": "44.243.130.55",
            "region": "us-west-2",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 3000,
                "kms_key_id": "",
                "tags": {},
                "tags_all": {},
                "throughput": 125,
                "volume_id": "vol-0845e7c7525070acd",
                "volume_size": 8,
                "volume_type": "gp3"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "allow_ssh_http"
            ],
            "source_dest_check": true,
            "spot_instance_request_id": "",
            "subnet_id": "subnet-07e002a40c94c9aa9",
            "tags": {
              "Name": "calculator"
            },
            "tags_all": {
              "Name": "calculator"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "#!/bin/bash\n\n# Exit on any error\nset -e\n\necho \"=== Starting Calculator Application Deployment ===\"\n\n# Update and install necessary packages\necho \"=== Updating system and installing packages ===\"\nsudo apt-get update\nsudo apt-get upgrade -y\nsudo apt install -y python3 python3-pip python3-venv nginx git\n\n# Set up application directory\necho \"=== Setting up application directory ===\"\ncd /var/www/html\n\n# Check if directory already exists\nif [ -d \"/var/www/html/calculator\" ]; then\n    echo \"Calculator directory already exists, updating...\"\n    cd calculator\n    sudo git pull\n    cd src\nelse\n    echo \"Cloning calculator repository...\"\n    sudo git clone https://github.com/maxoba/calculator.git\n    cd calculator/src\nfi\n\n# Set permissions for the application directory\nsudo chown -R ubuntu:ubuntu /var/www/html/calculator/\n\n# Set up Python virtual environment\necho \"=== Setting up Python virtual environment ===\"\npython3 -m venv jop\nsource jop/bin/activate\n\n# Install Python dependencies\necho \"=== Installing Python dependencies ===\"\npip install --upgrade pip\npip install --upgrade gunicorn\n\n# Install requirements if file exists\nif [ -f requirements.txt ]; then\n    pip install -r requirements.txt\nelse\n    echo \"No requirements.txt found, installing Flask manually\"\nfi\n\n# Install Flask (ensure it's available)\npip install flask\n\n# Create Flask app (backup - only if not already present)\nif [ ! -f app.py ]; then\n    echo \"=== Creating Flask application file ===\"\n    cat \u003e app.py \u003c\u003c 'EOL'\n# -*- coding: utf-8 -*-\n\"\"\"\n    Calculator\n    ~~~~~~~~~~~~~~\n\n    A simple Calculator made by Flask and jQuery.\n\n    :copyright: (c) 2015 by Grey li.\n    :license: MIT, see LICENSE for more details.\n\"\"\"\nimport re\nfrom flask import Flask, jsonify, render_template, request\n\n\napp = Flask(__name__)\n\n\n@app.route('/_calculate')\ndef calculate():\n    a = request.args.get('number1', '0')\n    operator = request.args.get('operator', '+')\n    b = request.args.get('number2', '0')\n    # validate the input data\n    m = re.match(r'^\\-?\\d*[.]?\\d*$', a)\n    n = re.match(r'^\\-?\\d*[.]?\\d*$', b)\n\n    if m is None or n is None or operator not in '+-*/':\n        return jsonify(result='Error!')\n\n    if operator == '/':\n        if float(b) == 0:\n            return jsonify(result='Error!')\n        result = float(a) / float(b)\n    elif operator == '*':\n        result = float(a) * float(b)\n    elif operator == '+':\n        result = float(a) + float(b)\n    elif operator == '-':\n        result = float(a) - float(b)\n    \n    return jsonify(result=result)\n\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n\nif __name__ == '__main__':\n    app.run(debug=True, host=\"0.0.0.0\")\nEOL\nelse\n    echo \"app.py already exists, skipping creation\"\nfi\n\n# Create wsgi.py (ensure it exists with correct syntax)\necho \"=== Creating WSGI configuration ===\"\ncat \u003e wsgi.py \u003c\u003c 'EOL'\nfrom app import app\n\nif __name__ == \"__main__\":\n    app.run()\nEOL\n\n# Create a Gunicorn systemd service file\necho \"=== Creating systemd service ===\"\nsudo tee /etc/systemd/system/calculator.service \u003e /dev/null \u003c\u003c 'EOL'\n[Unit]\nDescription=Gunicorn instance to serve calculator\nAfter=network.target\n\n[Service]\nUser=ubuntu\nGroup=www-data\nWorkingDirectory=/var/www/html/calculator/src\nEnvironment=\"PATH=/var/www/html/calculator/src/jop/bin\"\nExecStart=/var/www/html/calculator/src/jop/bin/gunicorn --bind 0.0.0.0:5000 wsgi:app\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOL\n\n# Start and enable the Gunicorn service\necho \"=== Starting calculator service ===\"\nsudo systemctl daemon-reload\nsudo systemctl start calculator\nsudo systemctl enable calculator\n\n# Create nginx configuration\necho \"=== Configuring Nginx ===\"\nsudo tee /etc/nginx/sites-available/calculator \u003e /dev/null \u003c\u003c 'EOL'\nserver {\n    listen 80;\n    server_name _;\n\n    location / {\n        include proxy_params;\n        proxy_pass http://127.0.0.1:5000;\n    }\n}\nEOL\n\n# Enable the Nginx configuration\nsudo ln -sf /etc/nginx/sites-available/calculator /etc/nginx/sites-enabled/\nsudo rm -f /etc/nginx/sites-enabled/default\n\n# Test nginx configuration\necho \"=== Testing Nginx configuration ===\"\nsudo nginx -t\n\n# Reload nginx\nsudo systemctl reload nginx\n\n# Print status of services\necho \"\"\necho \"=== DEPLOYMENT STATUS ===\"\necho \"=========================\"\necho \"\"\n\necho \"=== Calculator Service Status ===\"\nsudo systemctl status calculator --no-pager -l\n\necho \"\"\necho \"=== Nginx Service Status ===\"\nsudo systemctl status nginx --no-pager -l\n\n# Check if services are listening on correct ports\necho \"\"\necho \"=== Port Status ===\"\necho \"Checking port 5000 (Gunicorn):\"\nsudo ss -tlnp | grep :5000 || echo \"Port 5000 not listening\"\n\necho \"Checking port 80 (Nginx):\"\nsudo ss -tlnp | grep :80 || echo \"Port 80 not listening\"\n\n# Show recent logs\necho \"\"\necho \"=== Recent Calculator Service Logs ===\"\nsudo journalctl -u calculator --no-pager -n 10\n\n# Test the application\necho \"\"\necho \"=== Testing Application ===\"\necho \"Testing Flask app directly on port 5000...\"\ncurl -s localhost:5000 \u003e /dev/null \u0026\u0026 echo \"✅ Flask app responding\" || echo \"❌ Flask app not responding\"\n\necho \"Testing through Nginx on port 80...\"\ncurl -s localhost \u003e /dev/null \u0026\u0026 echo \"✅ Nginx proxy working\" || echo \"❌ Nginx proxy not working\"\n\n# Get public IP and show final message\nPUBLIC_IP=$(curl -s ifconfig.me 2\u003e/dev/null || echo \"Unable to determine public IP\")\n\necho \"\"\necho \"=== DEPLOYMENT COMPLETE ===\"\necho \"==========================\"\necho \"\"\necho \"🎉 Calculator application deployed successfully!\"\necho \"\"\necho \"Access your calculator at:\"\necho \"  http://$PUBLIC_IP\"\necho \"\"\necho \"Local testing URLs:\"\necho \"  Direct Flask: http://localhost:5000\"\necho \"  Through Nginx: http://localhost\"\necho \"\"\necho \"Service management commands:\"\necho \"  sudo systemctl status calculator\"\necho \"  sudo systemctl restart calculator\"\necho \"  sudo systemctl status nginx\"\necho \"  sudo systemctl restart nginx\"\necho \"\"\necho \"Log monitoring:\"\necho \"  sudo journalctl -u calculator -f\"\necho \"  sudo tail -f /var/log/nginx/error.log\"",
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-02fd8f538b8124032"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwicmVhZCI6OTAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "aws_security_group.allow_ssh_http"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "allow_ssh_http",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:105981222470:security-group/sg-02fd8f538b8124032",
            "description": "Allow SSH and HTTP traffic",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-02fd8f538b8124032",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 22,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 22
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 80,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 80
              }
            ],
            "name": "allow_ssh_http",
            "name_prefix": "",
            "owner_id": "105981222470",
            "region": "us-west-2",
            "revoke_rules_on_delete": false,
            "tags": null,
            "tags_all": {},
            "timeouts": null,
            "vpc_id": "vpc-0293333d27a5d4165"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "time_sleep",
      "name": "wait_for_instance",
      "provider": "provider[\"registry.terraform.io/hashicorp/time\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "create_duration": "240s",
            "destroy_duration": null,
            "id": "2025-07-19T00:38:13Z",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "aws_instance.calculator",
            "aws_security_group.allow_ssh_http"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
